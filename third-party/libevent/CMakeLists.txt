cmake_minimum_required(VERSION 3.6)
project(libevent)

include(../../common/apply_patch.cmake)
apply_patch("${CMAKE_CURRENT_SOURCE_DIR}/find_openssl.patch" "${CMAKE_CURRENT_SOURCE_DIR}/libevent")
apply_patch("${CMAKE_CURRENT_SOURCE_DIR}/evutil_socket_error_to_string_lang.patch" "${CMAKE_CURRENT_SOURCE_DIR}/libevent")

if (NOT TARGET boringssl_static)
    add_subdirectory(../boringssl ${CMAKE_BINARY_DIR}/boringssl)
endif()

set(EVENT__LIBRARY_TYPE "STATIC" CACHE STRING "Libevent library type" FORCE)
set(EVENT__DISABLE_TESTS ON CACHE BOOL "Libevent disable tests" FORCE)
set(EVENT__DISABLE_REGRESS ON CACHE BOOL "Libevent disable regress" FORCE)
set(EVENT__DISABLE_BENCHMARK ON CACHE BOOL "Libevent disable benchmark" FORCE)
set(EVENT__DISABLE_SAMPLES ON CACHE BOOL "Libevent disable samples" FORCE)
if (APPLE)
    # Disabling clock_gettime because MacOS 10.11 and lower doesn't have it
    set(EVENT__DISABLE_CLOCK_GETTIME ON CACHE BOOL "Libevent disable clock_gettime" FORCE)
endif ()
function(install)
    # installing disabled
endfunction()
function(export)
    # exporting disabled
endfunction()
add_subdirectory(libevent)
set_property(TARGET event_core_static PROPERTY POSITION_INDEPENDENT_CODE ON)
set_property(TARGET event_core_static PROPERTY EXCLUDE_FROM_ALL ON)
set_property(TARGET event_extra_static PROPERTY POSITION_INDEPENDENT_CODE ON)
set_property(TARGET event_extra_static PROPERTY EXCLUDE_FROM_ALL ON)
set_property(TARGET event_static PROPERTY POSITION_INDEPENDENT_CODE ON)
set_property(TARGET event_static PROPERTY EXCLUDE_FROM_ALL ON)
if (TARGET event_pthreads_static)
    set_property(TARGET event_pthreads_static PROPERTY POSITION_INDEPENDENT_CODE ON)
    set_property(TARGET event_pthreads_static PROPERTY EXCLUDE_FROM_ALL ON)
endif ()

add_library(libevent EXCLUDE_FROM_ALL stub.c)
target_include_directories(libevent PUBLIC ${CMAKE_CURRENT_BINARY_DIR}/libevent/include)
target_include_directories(libevent PUBLIC libevent/include)
target_link_libraries(libevent event_core_static)
target_link_libraries(libevent event_openssl_static boringssl_static)
if (UNIX)
    target_link_libraries(libevent event_pthreads_static)
endif ()
if (WIN32)
    target_link_libraries(libevent ws2_32 wsock32)
    if (WIN32)
        target_compile_definitions(event_openssl_static PUBLIC WIN32_LEAN_AND_MEAN=1)
    endif()
endif ()
