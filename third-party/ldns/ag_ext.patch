Index: net.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- net.c	(revision 53bc57512c19b11eebc403a4cb2bbf7295eb0db1)
+++ net.c	(date 1602192602793)
@@ -15,6 +15,8 @@
 
 #include <ldns/ldns.h>
 
+#include <ldns/ag_ext.h>
+
 #ifdef HAVE_NETINET_IN_H
 #include <netinet/in.h>
 #endif
@@ -34,6 +36,8 @@
 #include <poll.h>
 #endif
 
+static void ag_log_sockname(int sockfd, const char *msg, const struct sockaddr_storage *to);
+
 ldns_status
 ldns_send(ldns_pkt **result_packet, ldns_resolver *r, const ldns_pkt *query_pkt)
 {
@@ -178,12 +182,15 @@
 	ret = poll(pfds, 1, (int)(timeout.tv_sec * 1000
 				+ timeout.tv_usec / 1000));
 #endif
-	if(ret == 0)
-		/* timeout expired */
-		return 0;
-	else if(ret == -1)
-		/* error */
-		return 0;
+	if(ret == 0) {
+        ag_ldns_set_socket_error(LDNS_ETIMEDOUT);
+        /* timeout expired */
+        return 0;
+    } else if(ret == -1) {
+        ag_ldns_set_socket_error(ag_ldns_socket_geterror(sockfd));
+        /* error */
+        return 0;
+    }
 	return 1;
 }
 
@@ -191,17 +198,24 @@
 static int
 ldns_tcp_connect_from(const struct sockaddr_storage *to, socklen_t tolen, 
 	       	const struct sockaddr_storage *from, socklen_t fromlen,
-		struct timeval timeout)
+		struct timeval timeout, int (*prepare_cb)(int fd, int family, void *ctx), void *prepare_arg)
 {
 	int sockfd;
 
 #ifndef S_SPLINT_S
 	if ((sockfd = socket((int)((struct sockaddr*)to)->sa_family, SOCK_STREAM, 
 					IPPROTO_TCP)) == SOCK_INVALID) {
+        ag_ldns_set_socket_error(ag_ldns_socket_geterror(sockfd));
 		return -1;
 	}
 #endif
+    if (prepare_cb && !prepare_cb(sockfd, to->ss_family, prepare_arg)) {
+        ag_ldns_set_socket_error(0);
+        close_socket(sockfd);
+        return -1;
+    }
 	if (from && bind(sockfd, (const struct sockaddr*)from, fromlen) == SOCK_INVALID){
+        ag_ldns_set_socket_error(ag_ldns_socket_geterror(sockfd));
 		close_socket(sockfd);
 		return -1;
 	}
@@ -209,6 +223,7 @@
 	/* perform nonblocking connect, to be able to wait with select() */
 	ldns_sock_nonblock(sockfd);
 	if (connect(sockfd, (struct sockaddr*)to, tolen) == SOCK_INVALID) {
+        ag_ldns_set_socket_error(ag_ldns_socket_geterror(sockfd));
 #ifndef USE_WINSOCK
 #ifdef EINPROGRESS
 		if(errno != EINPROGRESS) {
@@ -254,6 +269,7 @@
 #endif
 		else if(error != 0) {
 			close_socket(sockfd);
+            ag_ldns_set_socket_error(error);
 			/* error in errno for our user */
 			errno = error;
 			return -1;
@@ -265,6 +281,7 @@
 			continue;
 		else if(error != 0) {
 			close_socket(sockfd);
+			ag_ldns_set_socket_error(error);
 			errno = error;
 			return -1;
 		}
@@ -283,7 +300,7 @@
 ldns_tcp_connect(const struct sockaddr_storage *to, socklen_t tolen, 
 		struct timeval timeout)
 {
-	int s = ldns_tcp_connect_from(to, tolen, NULL, 0, timeout);
+	int s = ldns_tcp_connect_from(to, tolen, NULL, 0, timeout, NULL, NULL);
 	return s > 0 ? s : 0;
 }
 
@@ -291,19 +308,21 @@
 ldns_tcp_connect2(const struct sockaddr_storage *to, socklen_t tolen, 
 		struct timeval timeout)
 {
-	return ldns_tcp_connect_from(to, tolen, NULL, 0, timeout);
+	return ldns_tcp_connect_from(to, tolen, NULL, 0, timeout, NULL, NULL);
 }
 
 static int
 ldns_tcp_bgsend_from(ldns_buffer *qbin,
 		const struct sockaddr_storage *to, socklen_t tolen, 
 	       	const struct sockaddr_storage *from, socklen_t fromlen,
-		struct timeval timeout)
+		struct timeval timeout, int (*prepare_cb)(int fd, int family, void *ctx), void *prepare_arg)
 {
 	int sockfd;
 	
-	sockfd = ldns_tcp_connect_from(to, tolen, from, fromlen, timeout);
-	
+	sockfd = ldns_tcp_connect_from(to, tolen, from, fromlen, timeout, prepare_cb, prepare_arg);
+
+	ag_log_sockname(sockfd, "Sending TCP", to);
+
 	if (sockfd >= 0 && ldns_tcp_send_query(qbin, sockfd, to, tolen) == 0) {
 		close_socket(sockfd);
 		return -1;
@@ -317,7 +336,7 @@
 		const struct sockaddr_storage *to, socklen_t tolen, 
 		struct timeval timeout)
 {
-	int s = ldns_tcp_bgsend_from(qbin, to, tolen, NULL, 0, timeout);
+	int s = ldns_tcp_bgsend_from(qbin, to, tolen, NULL, 0, timeout, NULL, NULL);
 	return s > 0 ? s : 0;
 }
 
@@ -326,7 +345,7 @@
 		const struct sockaddr_storage *to, socklen_t tolen, 
 		struct timeval timeout)
 {
-	return ldns_tcp_bgsend_from(qbin, to, tolen, NULL, 0, timeout);
+	return ldns_tcp_bgsend_from(qbin, to, tolen, NULL, 0, timeout, NULL, NULL);
 }
 
 /* keep in mind that in DNS tcp messages the first 2 bytes signal the
@@ -336,12 +355,12 @@
 ldns_tcp_send_from(uint8_t **result,  ldns_buffer *qbin,
 	       	const struct sockaddr_storage *to, socklen_t tolen,
 	       	const struct sockaddr_storage *from, socklen_t fromlen,
-		struct timeval timeout, size_t *answer_size)
+		struct timeval timeout, size_t *answer_size, int (*prepare_cb)(int fd, int family, void *ctx), void *prepare_arg)
 {
 	int sockfd;
 	uint8_t *answer;
 	
-	sockfd = ldns_tcp_bgsend_from(qbin, to, tolen, from, fromlen, timeout);
+	sockfd = ldns_tcp_bgsend_from(qbin, to, tolen, from, fromlen, timeout, prepare_cb, prepare_arg);
 	
 	if (sockfd == -1) {
 		return LDNS_STATUS_ERR;
@@ -362,10 +381,10 @@
 ldns_status
 ldns_tcp_send(uint8_t **result,  ldns_buffer *qbin,
 		const struct sockaddr_storage *to, socklen_t tolen,
-		struct timeval timeout, size_t *answer_size)
+		struct timeval timeout, size_t *answer_size, int (*prepare_cb)(int fd, int family, void *ctx), void *prepare_arg)
 {
 	return ldns_tcp_send_from(result, qbin,
-			to, tolen, NULL, 0, timeout, answer_size);
+			to, tolen, NULL, 0, timeout, answer_size, prepare_cb, prepare_arg);
 }
 
 int
@@ -398,21 +417,38 @@
 	return sockfd;
 }
 
+static int ldns_udp_connect3(const struct sockaddr_storage *to, struct timeval ATTR_UNUSED(timeout)) {
+    int sockfd = socket((int)((struct sockaddr*)to)->sa_family, SOCK_DGRAM, IPPROTO_UDP);
+    if (sockfd == SOCK_INVALID) {
+        ag_ldns_set_socket_error(ag_ldns_socket_geterror(sockfd));
+        return -1;
+    }
+    return sockfd;
+}
+
 static int
 ldns_udp_bgsend_from(ldns_buffer *qbin,
 		const struct sockaddr_storage *to  , socklen_t tolen, 
 		const struct sockaddr_storage *from, socklen_t fromlen, 
-		struct timeval timeout)
+		struct timeval timeout, int (*prepare_cb)(int fd, int family, void *ctx), void *prepare_arg)
 {
 	int sockfd;
 
 	sockfd = ldns_udp_connect2(to, timeout);
 
 	if (sockfd == -1) {
+        ag_ldns_set_socket_error(ag_ldns_socket_geterror(sockfd));
 		return -1;
 	}
 
+	if (prepare_cb && !prepare_cb(sockfd, to->ss_family, prepare_arg)) {
+        ag_ldns_set_socket_error(0);
+        close_socket(sockfd);
+        return -1;
+	}
+
 	if (from && bind(sockfd, (const struct sockaddr*)from, fromlen) == -1){
+        ag_ldns_set_socket_error(ag_ldns_socket_geterror(sockfd));
 		close_socket(sockfd);
 		return -1;
 	}
@@ -429,7 +465,7 @@
 		const struct sockaddr_storage *to  , socklen_t tolen, 
 		struct timeval timeout)
 {
-	int s = ldns_udp_bgsend_from(qbin, to, tolen, NULL, 0, timeout);
+	int s = ldns_udp_bgsend_from(qbin, to, tolen, NULL, 0, timeout, NULL, NULL);
 	return s > 0 ? s : 0;
 }
 
@@ -438,19 +474,20 @@
 		const struct sockaddr_storage *to  , socklen_t tolen, 
 		struct timeval timeout)
 {
-	return ldns_udp_bgsend_from(qbin, to, tolen, NULL, 0, timeout);
+	return ldns_udp_bgsend_from(qbin, to, tolen, NULL, 0, timeout, NULL, NULL);
 }
 
 static ldns_status
 ldns_udp_send_from(uint8_t **result, ldns_buffer *qbin,
 		const struct sockaddr_storage *to  , socklen_t tolen,
 		const struct sockaddr_storage *from, socklen_t fromlen,
-		struct timeval timeout, size_t *answer_size)
+		struct timeval timeout, size_t *answer_size,
+                   int (*prepare_cb)(int fd, int family, void *ctx), void *prepare_arg)
 {
 	int sockfd;
 	uint8_t *answer;
 
-	sockfd = ldns_udp_bgsend_from(qbin, to, tolen, from, fromlen, timeout);
+	sockfd = ldns_udp_bgsend_from(qbin, to, tolen, from, fromlen, timeout, prepare_cb, prepare_arg);
 
 	if (sockfd == -1) {
 		return LDNS_STATUS_SOCKET_ERROR;
@@ -482,10 +519,11 @@
 ldns_status
 ldns_udp_send(uint8_t **result, ldns_buffer *qbin,
 		const struct sockaddr_storage *to  , socklen_t tolen,
-		struct timeval timeout, size_t *answer_size)
+		struct timeval timeout, size_t *answer_size,
+              int (*prepare_cb)(int fd, int family, void *ctx), void *prepare_arg)
 {
 	return ldns_udp_send_from(result, qbin, to, tolen, NULL, 0,
-			timeout, answer_size);
+			timeout, answer_size, prepare_cb, prepare_arg);
 }
 
 ldns_status
@@ -575,7 +613,7 @@
 						ns, (socklen_t)ns_len,
 						src, (socklen_t)src_len,
 						ldns_resolver_timeout(r),
-						&reply_size);
+						&reply_size, NULL, NULL);
 				if (send_status == LDNS_STATUS_OK) {
 					break;
 				}
@@ -588,7 +626,7 @@
 						ns,  (socklen_t)ns_len,
 						src, (socklen_t)src_len,
 						ldns_resolver_timeout(r),
-						&reply_size);
+						&reply_size, NULL, NULL);
 				if (send_status == LDNS_STATUS_OK) {
 					break;
 				}
@@ -695,8 +733,12 @@
 
         LDNS_FREE(sendbuf);
 
-	if (bytes == -1 || (size_t) bytes != ldns_buffer_position(qbin) + 2 ) {
+	if (bytes == -1) {
+	    ag_ldns_set_socket_error(ag_ldns_socket_geterror(sockfd));
 		return 0;
+	}
+	if ((size_t) bytes != ldns_buffer_position(qbin) + 2) {
+	    return 0;
 	}
 	return bytes;
 }
@@ -708,12 +750,22 @@
 {
 	ssize_t bytes;
 
-	bytes = sendto(sockfd, (void*)ldns_buffer_begin(qbin),
-			ldns_buffer_position(qbin), 0, (struct sockaddr *)to, tolen);
+    if (-1 == connect(sockfd, (struct sockaddr *) to, tolen)) {
+        ag_ldns_set_socket_error(ag_ldns_socket_geterror(sockfd));
+        return 0;
+    }
+
+    ag_log_sockname(sockfd, "Sending UDP", to);
 
-	if (bytes == -1 || (size_t)bytes != ldns_buffer_position(qbin)) {
-		return 0;
+	bytes = send(sockfd, (void*)ldns_buffer_begin(qbin), ldns_buffer_position(qbin), 0);
+
+	if (bytes == -1) {
+		ag_ldns_set_socket_error(ag_ldns_socket_geterror(sockfd));
+	    return 0;
 	}
+	if ((size_t)bytes != ldns_buffer_position(qbin)) {
+	    return 0;
+	}
 	return bytes;
 }
 
@@ -734,7 +786,11 @@
 			(struct sockaddr *)from, fromlen);
 
 	/* recvfrom can also return 0 */
-	if (wire_size == -1 || wire_size == 0) {
+	if (wire_size <= 0) {
+        ag_ldns_set_socket_error(0); // Might just be empty datagram
+	    if (wire_size < 0) {
+            ag_ldns_set_socket_error(ag_ldns_socket_geterror(sockfd));
+	    }
 		*size = 0;
 		LDNS_FREE(wire);
 		return NULL;
@@ -951,7 +1007,8 @@
 		resolver->_socket = ldns_tcp_connect_from(
 				ns, (socklen_t)ns_len,
 				src, (socklen_t)src_len,
-				ldns_resolver_timeout(resolver));
+				ldns_resolver_timeout(resolver),
+				NULL, NULL);
 	}
 	if (src) {
 		LDNS_FREE(src);
@@ -1034,3 +1091,36 @@
         resolver->_axfr_soa_count = 0;
         return LDNS_STATUS_OK;
 }
+
+void ag_log_sockname(int sockfd, const char *msg, const struct sockaddr_storage *to) {
+    if (!ag_ldns_should_log()) {
+        return;
+    }
+    struct sockaddr_storage ss_from = {0};
+    socklen_t len_from = sizeof(ss_from);
+    if (-1 == getsockname(sockfd, (struct sockaddr *) &ss_from, &len_from)) {
+        ag_ldns_log("%s: getsockname: %n", __func__, ag_ldns_socket_geterror(sockfd));
+    }
+    void *from_addr;
+    int from_port;
+    void *to_addr;
+    int to_port;
+    if (ss_from.ss_family == AF_INET) {
+        from_port = ntohs(((struct sockaddr_in *) &ss_from)->sin_port);
+        from_addr = &((struct sockaddr_in *) &ss_from)->sin_addr;
+        to_port = ntohs(((struct sockaddr_in *) to)->sin_port);
+        to_addr = &((struct sockaddr_in *) to)->sin_addr;
+    } else if (ss_from.ss_family == AF_INET6) {
+        from_port = ntohs(((struct sockaddr_in6 *) &ss_from)->sin6_port);
+        from_addr = &((struct sockaddr_in6 *) &ss_from)->sin6_addr;
+        to_port = ntohs(((struct sockaddr_in6 *) to)->sin6_port);
+        to_addr = &((struct sockaddr_in6 *) to)->sin6_addr;
+    } else {
+        ag_ldns_log("unexpected address family: %d", ss_from.ss_family);
+        return;
+    }
+    char buf[2 * INET6_ADDRSTRLEN];
+    evutil_inet_ntop(ss_from.ss_family, from_addr, buf, INET6_ADDRSTRLEN);
+    evutil_inet_ntop(ss_from.ss_family, to_addr, buf + INET6_ADDRSTRLEN, INET6_ADDRSTRLEN);
+    ag_ldns_log("%s: %s:%d -> %s:%d", msg, buf, from_port, buf + INET6_ADDRSTRLEN, to_port);
+}
