diff --git bufferevent.c bufferevent.c
index 08c0486c..f5f668fa 100644
--- bufferevent.c
+++ bufferevent.c
@@ -385,6 +385,16 @@ err:
 	return -1;
 }
 
+void bufferevent_setpreparecb(struct bufferevent *bufev, ag_bufferevent_prepare_cb preparecb, void *preparecbarg)
+{
+	BEV_LOCK(bufev);
+
+	bufev->preparecb = preparecb;
+	bufev->preparecbarg = preparecbarg;
+
+	BEV_UNLOCK(bufev);
+}
+
 void
 bufferevent_setcb(struct bufferevent *bufev,
     bufferevent_data_cb readcb, bufferevent_data_cb writecb,
diff --git bufferevent_sock.c bufferevent_sock.c
index f275b023..f3a60ae2 100644
--- bufferevent_sock.c
+++ bufferevent_sock.c
@@ -396,9 +396,14 @@ bufferevent_socket_connect(struct bufferevent *bev,
 		fd = evutil_socket_(sa->sa_family,
 		    SOCK_STREAM|EVUTIL_SOCK_NONBLOCK, 0);
 		if (fd < 0)
-			goto freesock;
+			goto done;
 		ownfd = 1;
 	}
+	if (bev->preparecb) {
+		if (!bev->preparecb(fd, sa, socklen, bev->preparecbarg)) {
+			goto freesock;
+		}
+	}
 	if (sa) {
 #ifdef _WIN32
 		if (bufferevent_async_can_connect_(bev)) {
@@ -431,16 +436,11 @@ bufferevent_socket_connect(struct bufferevent *bev,
 			result = 0;
 			goto done;
 		}
-	} else if (r == 1) {
+	} else {
 		/* The connect succeeded already. How very BSD of it. */
 		result = 0;
 		bufev_p->connecting = 1;
 		bufferevent_trigger_nolock_(bev, EV_WRITE, BEV_OPT_DEFER_CALLBACKS);
-	} else {
-		/* The connect failed already.  How very BSD of it. */
-		result = 0;
-		bufferevent_run_eventcb_(bev, BEV_EVENT_ERROR, BEV_OPT_DEFER_CALLBACKS);
-		bufferevent_disable(bev, EV_WRITE|EV_READ);
 	}
 
 	goto done;
@@ -448,6 +448,12 @@ bufferevent_socket_connect(struct bufferevent *bev,
 freesock:
 	if (ownfd)
 		evutil_closesocket(fd);
+
+    /* The connect failed already.  How very BSD of it. */
+    result = 0;
+    bufferevent_run_eventcb_(bev, BEV_EVENT_ERROR, BEV_OPT_DEFER_CALLBACKS);
+    bufferevent_disable(bev, EV_WRITE|EV_READ);
+
 done:
 	bufferevent_decref_and_unlock_(bev);
 	return result;
diff --git include/event2/bufferevent.h include/event2/bufferevent.h
index 48cd1535..74479be2 100644
--- include/event2/bufferevent.h
+++ include/event2/bufferevent.h
@@ -119,6 +119,15 @@ struct event_base;
 struct evbuffer;
 struct sockaddr;
 
+/**
+   A fd prepare callback for a bufferevent.
+
+   @param fd file descriptor
+   @param ctx the user-specified context for this bufferevent
+   @return 1 on success, 0 if error occurred and socket must be closed
+ */
+typedef int (*ag_bufferevent_prepare_cb)(int fd, const struct sockaddr *sa, int salen, void *ctx);
+
 /**
    A read or write callback for a bufferevent.
 
@@ -324,6 +333,9 @@ void bufferevent_setcb(struct bufferevent *bufev,
     bufferevent_data_cb readcb, bufferevent_data_cb writecb,
     bufferevent_event_cb eventcb, void *cbarg);
 
+EVENT2_EXPORT_SYMBOL
+void bufferevent_setpreparecb(struct bufferevent *bufev, ag_bufferevent_prepare_cb preparecb, void *preparecbarg);
+
 /**
  Retrieves the callbacks for a bufferevent.
 
diff --git include/event2/bufferevent_struct.h include/event2/bufferevent_struct.h
index e84c082c..050a5a2e 100644
--- include/event2/bufferevent_struct.h
+++ include/event2/bufferevent_struct.h
@@ -107,6 +107,9 @@ struct bufferevent {
 	/** Events that are currently enabled: currently EV_READ and EV_WRITE
 	    are supported. */
 	short enabled;
+
+	ag_bufferevent_prepare_cb preparecb;
+	void *preparecbarg;
 };
 
 #ifdef __cplusplus
